@using DarkDescent.Actor.Damage
@using Sandbox
@using Sandbox.UI

@namespace DarkDescent.Actor.UI
@attribute [StyleSheet]
@inherits WorldNumberComponent

<root class="world-number-panel damage-number">
	<label class="main-number @GetDamageClass(DamageEventData.DamageTypes)">@($"{DamageEventData.DamageResult:#0.}")</label>
</root>

@code 
{
	private DamageEventData DamageEventData { get; set; }

	public static GameObject Create( DamageEventData damageEventData )
	{
		var gameObject = SceneUtility.SpawnPrefabFromPath("data/damage_number.object", damageEventData.Position, Rotation.Identity);

		if (gameObject.Components.TryGet<DamageNumberComponent>(out var damageNumberComponent))
		{
			damageNumberComponent.DamageEventData = damageEventData;

			damageNumberComponent.Transform.Position = damageEventData.Position;

			damageNumberComponent.CalculateVelocity();
		}
		
		return gameObject;
	}

	protected sealed override void CalculateVelocity()
	{
		//var pos = DamageEventData.Target != null ? DamageEventData.Target.WorldSpaceBounds.Center : Position;
		var pos = DamageEventData.Target.Transform.Position;
		var dir = (DamageEventData.Position - pos).Normal;
		
		Velocity = dir * Game.Random.Float( 100, 200 ); 
	}

	private string GetDamageClass(DamageType damageTypes)
	{
		switch (damageTypes)
		{
			case DamageType.Physical:
				return "physical";
			case DamageType.Magical:
				return "magical";
			case DamageType.Fire:
				return "fire";
			case DamageType.Frost:
				return "frost";
			case DamageType.Electric:
				return "electric";
			case DamageType.Poison:
				return "poison";
			case DamageType.Necrotic:
				return "necrotic";
			case DamageType.Arcane:
				return "arcane";
			case DamageType.Divine:
				return "divine";
			case DamageType.Occult:
				return "occult";
			case DamageType.Absolute:
				return "absolute";
			case DamageType.Chaotic:
				return "chaotic";
		}

		return "physical";
	}
}
